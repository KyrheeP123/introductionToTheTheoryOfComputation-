1. What comes first, the algorithm or the mathematical model of the computer ? 
    - I think it should be the alogrithm which hopefully is designed well. This reiterates the need to study the Algorithms Design book. From what I recall, stating the problem,      formulating the problem, and designing the algorithm are the main steps I have learned so far from the problem. Additionally, one should proof that their algorithm works.
      After, these steps are complete then, one can move on do designing a automata to implement the algorithm in a computer.

2. For me, mentally, abstracting any technological offering to it's automata really simplifies what I imagine the implementation looks like. For example, while someone is typing a tweet that is under 140 characters they are in the under 140 characters state. The moment the client clicks the 141th character, then, they transition to the more than 140 characters states which upon transition does not allow the client to post or initialize a tweet. Furthermore, this would seem like a good tool to use to ensure the software components to be developed in a system actually do one thing and one thing only. I'd imagine it'll be easy to identify when an automata is doing more than one thing. When this is identified, the Computer Scientist or Software Engineer should seperate the two behaviors which will inevitably make the code cleaner and maintainable. While on the topic of clean code, the automata also prompts --hopefully -- for good variable name can be derived from the automata's state names. 
